security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_NUTRITIONIST, ROLE_CUSTOMER, ROLE_USER, ROLE_ALLOWED_TO_SWITCH]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        database_users:
            entity: { class: App\Entity\User, property: username }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js|translations)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            entry_point: jwt
            jwt: ~
            json_login:
                check_path: /api/login_check # or api_login_check as defined in config/routes.yaml
                username_path: username
                password_path: password
                success_handler: App\Security\Http\Authentication\ApiAuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false
            refresh_jwt:
                check_path: /api/token/refresh
            logout:
                path: api_token_invalidate
        main:
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
            pattern: ^/
            form_login:
                enable_csrf: true
                check_path: security_login
                login_path: security_login
                default_target_path: homepage
                always_use_default_target_path: false
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            logout:
                path: security_logout
                target: security_login
            entry_point: App\Security\AuthenticationEntryPoint
            user_checker: App\Security\AccessPortalChecker
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH }
            provider: database_users

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/2fa', role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: '^/login', roles: PUBLIC_ACCESS }
        - { path: '^/resetting/*', roles: PUBLIC_ACCESS }
        - { path: '/customer/registration/*', roles: PUBLIC_ACCESS }
        - { path: '/translations', roles: PUBLIC_ACCESS }
        # ADMIN
        - { path: '^/admin', roles: ROLE_NUTRITIONIST }
        # API
        - { path: '^/api/(login|token)', roles: PUBLIC_ACCESS }
        - { path: '^/api', roles: IS_AUTHENTICATED_FULLY }
        - { path: '^/docs', roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI
        - { path: '^/api/login_check', roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI
        # OTHERS
        - { path: '^/', roles: [ROLE_NUTRITIONIST, ROLE_CUSTOMER, ROLE_ALLOWED_TO_SWITCH] }
